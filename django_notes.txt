Django follows the MTV (Model, Template, View) structure, which is similar to the MVC (Model, View, Controller) structure.

Model: builds database tables and handles all interaction with the database.
Templates: are served in their complete form to the client. Django's templating allows us to perform some logic and inject data into our HTML documents.
Views: The views document is somewhat confusingly named, but can be thought of as managing traffic. It is the view's job to get the right data for the right route delivered in the right form. Views handle the data we deliver to the user to view.


Django installation:

Step 1: Create a virtual environment in your virtual environment folder:

> virtualenv djangoEnv
> source djangoEnv/bin/activate
(djangoEnv)>pip install Django==1.10



Start a new Django project

1. Activate virtual environment

source djangoEnv/bin/activate

# to close the file:
deactivate

2. Change directory to where you want to start the project.

3. In that directory:
django-admin startproject {{ project name - can be main }}

4. Change directory to main inside that project.

5. Create an apps folder (at the same level as main and manage.py).

6. Create a file named __init__.py inside apps inside {{ project name directory }}

7. From inside apps folder, create a new app by running:
python ../manage.py startapp {{ name of app }}

8. After creating an app, cd to main inside the project, in settings.py, add the app you just created

9. Add the templates (html) folder, static (css, javascript) folder, and the urls.py folder to the app's folder

10. Run the server - change to main folder (parent of manage.py)
python manage.py runserver

11. Write the app. When mostly done, turn off server, turn on session with:
# Need to be in same directory as manage.py file
> python manage.py makemigrations
> python manage.py migrate

12. Shell, for DB:
python manage.py shell
exit() to quit
to bring in all your data:
>>> from apps.{{app_name}}.models import *

13. To create a new empty DB
  delete db.sqlite3
  delete all files inside main/apps/first_app/migrations, except init.py
  run server to recreate a db
  make migrations


Notes

url(r'^$', views.index) ^ means starts, $ means ends - nothing between the two means anything


Regular Expressions - commonly known as regex, are a set of rules for identifying or matching strings. Many programming languages, including Python, support use of regular expressions for matching and searching strings.
A good resource for you to get familiar with Regex is regexr.com

Here is a cheat sheet for expressions you'll be using regularly:

'^' Matches the following characters at the beginning of a string. Example: '^a' matches 'anna' but not 'banana'.
'$' Matches the previous characters at the end of a string. Example: 'a$' matches 'anna' and 'banana' but not 'fan'.
'[]' Matches any value in a range. Example: '[0-9]' matches '9' and '9s'.
'{n}' Matches n number or more repetitions of the preceding pattern. Example: '[0-9]{2}' matches '91' and '9834' but not '9'
\d Matches digits.  Example: "\d" matches "8" and "877x"
\d+ matches a string with one or more digits
\w Matches characters.
\w+ matches a string with one or more character/word


Tabs for when working with Django:
1. urls.py (dir: main)
2. urls.py (dir: apps/first_app)
3. views.py (dir: apps/first_app)
4 - xx. HTML & CSS / front-end




ORM COMMANDS:

Creating a new record
  Blog.objects.create({{field1}}="{{value}}", {{field2}}="{{value}}", etc) # creates a new record in the Blog table
  Blog.objects.create(name="Star Wars Blog", desc="Everything about Star Wars") # creates a new blog record
  Blog.objects.create(name="CodingDojo Blog") # creates a new blog record with the empty desc field

Alternative way of creating a record
  b = Blog(name="Disney Blog", desc="Disney stuff")
  b.name = "Disney Blog!"
  b.desc = "Disney stuff!!!"
  b.save()

Basic Retrieval
  Blog.objects.first() - retrieves the first record in the Blog table
  Blog.objects.last() - retrieves the last record in the Blog table
  Blog.objects.all() - retrieves all records in the Blog table
  Blog.objects.count() - shows how many records are in the Blog table

Updating the record - once you obtain an object that has the record you want to modify, use save() to update the record.  For example
  b = Blog.objects.first() # gets the first record in the blogs table
  b.name = "CodingDojo Blog"  # set name to be "CodingDojo Blog"
  b.save() # updates the blog record
Deleting the record - use delete().  For example
  b = Blog.objects.get(id=1)
  b.delete() # deletes that particular record
Other methods to retrieve records
  Blog.objects.get(id=1) - retrieves where id is 1; get only retrieves 1 record
  Blog.objects.filter(name="mike") - retrieves records where name is "mike"; returns multiple records
  Blog.objects.exclude(name="mike") - opposite of filter; returns multiple records
  Blog.objects.order_by("created_at") - orders by created_date field
  Blog.objects.order_by("-created_at") - reverses the order
  Blog.objects.raw("SELECT * FROM {{app_name}}_{{class/table name}}") - performs a raw SQL query
  Blog.objects.first().comments.all() - grabs all comments from the first Blog
  Blog.objects.get(id=15).comments.first() - grabs the first comment from Blog id = 15
  Comment.objects.get(id=15).blog.name - returns the name of the blog where Comment id = 15 belongs to
Edit a user
  user = User.objects.get(first_name="Zach")
  user.last_name = "Owens"
  user.save()

Setting Relationship
  Comment.objects.create(blog=Blog.objects.get(id=1), comment="test") - create a new comment where the comment's blog points to Blog.objects.get(id=1).
