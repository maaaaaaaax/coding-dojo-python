Django follows the MTV (Model, Template, View) structure, which is similar to the MVC (Model, View, Controller) structure.

Model: builds database tables and handles all interaction with the database.
Templates: are served in their complete form to the client. Django's templating allows us to perform some logic and inject data into our HTML documents.
Views: The views document is somewhat confusingly named, but can be thought of as managing traffic. It is the view's job to get the right data for the right route delivered in the right form. Views handle the data we deliver to the user to view.


Django installation:

Step 1: Create a virtual environment in your virtual environment folder:

> virtualenv djangoEnv
> source djangoEnv/bin/activate
(djangoEnv)>pip install Django==1.10



Start a new Django project

1. Activate virtual environment

source djangoEnv/bin/activate

# to close the file:
deactivate

2. Change directory to where you want to start the project.

3. In that directory:
django-admin startproject {{ project name - can be main }}

4. Change directory to main inside that project.

5. Create an apps folder (at the same level as main and manage.py).

6. Create a file named __init__.py inside apps inside {{ project name directory }}

7. From inside apps folder, create a new app by running:
python ../manage.py startapp {{ name of app }}

8. After creating an app, cd to main inside the project, in settings.py, add the app you just created

9. Run the server - change to main folder (parent of manage.py)
python manage.py runserver

10. Write the app. When mostly done, turn off server, turn on session with:
# Need to be in same directory as manage.py file
> python manage.py makemigrations
> python manage.py migrate


Notes

url(r'^$', views.index) ^ means starts, $ means ends - nothing between the two means anything


Regular Expressions - commonly known as regex, are a set of rules for identifying or matching strings. Many programming languages, including Python, support use of regular expressions for matching and searching strings.
A good resource for you to get familiar with Regex is regexr.com

Here is a cheat sheet for expressions you'll be using regularly:

'^' Matches the following characters at the beginning of a string. Example: '^a' matches 'anna' but not 'banana'.
'$' Matches the previous characters at the end of a string. Example: 'a$' matches 'anna' and 'banana' but not 'fan'.
'[]' Matches any value in a range. Example: '[0-9]' matches '9' and '9s'.
'{n}' Matches n number or more repetitions of the preceding pattern. Example: '[0-9]{2}' matches '91' and '9834' but not '9'
\d Matches digits.  Example: "\d" matches "8" and "877x"
\d+ matches a string with one or more digits
\w Matches characters.
\w+ matches a string with one or more character/word


Tabs for when working with Django:
1. setting.py (dir: main)
2. urls.py (dir: main)
3. urls.py (dir: apps/first_app)
4. views.py (dir: apps/first_app)
